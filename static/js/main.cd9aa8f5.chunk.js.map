{"version":3,"sources":["redux/credentials/credentials.actions.js","redux/credentials/credentials.reducer.js","redux/credentials/credentials.selectors.js","redux/credentials/index.js","redux/discussion/discussion.actions.js","redux/discussion/discussion.reducer.js","redux/discussion/discussion.selectors.js","redux/discussion/index.js","redux/os/os.actions.js","redux/os/os.reducer.js","redux/os/os.selectors.js","redux/os/index.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["setToken","token","type","payload","setHost","host","clearCredentials","setOnline","online","setStarted","started","initState","reducer","state","arguments","length","undefined","action","Object","objectSpread","uri","getToken","getHost","isOnline","isStarted","__webpack_require__","d","__webpack_exports__","addMessage","emitter","content","format","date","Date","now","clearMessages","messages","concat","toConsumableArray","getMessages","socket","waitForResponse","context","identity","name","matchExact","pattern","contextIdRequired","toLowerCase","id","showNotification","message","window","Notification","permission","body","setMemory","memory","emit","sendMessage","dispatch","getState","setTimeout","tryConnection","match","disconnect","io","on","label","priority","clearTimeout","console","log","_ref","notificationReady","requestPermission","status","document","visibilityState","setValue","value","defineProperty","getMemory","os_actions_sendMessage","os_actions_tryConnection","os_actions_setValue","persistConfig","key","storage","rootReducer","combineReducers","_combineReducers","credentialsUri","credentials","discussionUri","discussion","osUri","os","persistedReducer","persistReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","Load","Loadable","loader","Promise","all","e","bind","loading","react_default","a","createElement","ReactDOM","render","es","integration_react","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cd9aa8f5.chunk.js","sourcesContent":["export const SET_TOKEN = 'SET_TOKEN'\nexport const setToken = token => ({\n  type: SET_TOKEN,\n  payload: {\n    token,\n  },\n})\n\nexport const SET_HOST = 'SET_HOST'\nexport const setHost = host => ({\n  type: SET_HOST,\n  payload: {\n    host,\n  },\n})\n\nexport const CLEAR_CREDENTIALS = 'CLEAR_CREDENTIALS'\nexport const clearCredentials = () => ({\n  type: CLEAR_CREDENTIALS,\n})\n\nexport const SET_ONLINE = 'SET_ONLINE'\nexport const setOnline = online => ({\n  type: SET_ONLINE,\n  payload: {\n    online,\n  },\n})\n\nexport const SET_STARTED = 'SET_STARTED'\nexport const setStarted = started => ({\n  type: SET_STARTED,\n  payload: {\n    started,\n  },\n})\n","import {\n  SET_TOKEN,\n  SET_HOST,\n  CLEAR_CREDENTIALS,\n  SET_ONLINE,\n  SET_STARTED,\n} from './credentials.actions.js'\n\nconst initState = {\n  token: '',\n  host: '',\n  online: false,\n  started: false,\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case SET_TOKEN:\n      return {\n        ...state,\n        token: action.payload.token,\n      }\n    case SET_HOST:\n      return {\n        ...state,\n        host: action.payload.host,\n      }\n    case SET_ONLINE:\n      return {\n        ...state,\n        online: action.payload.online,\n      }\n    case SET_STARTED:\n      return {\n        ...state,\n        started: action.payload.started,\n      }\n    case CLEAR_CREDENTIALS:\n      return initState\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","export const uri = 'credentials'\n\nexport const getToken = state => state[uri].token\nexport const getHost = state => state[uri].host\nexport const isOnline = state => state[uri].online\nexport const isStarted = state => state[uri].started\n","import reducer from './credentials.reducer'\n\nexport default reducer\nexport * from './credentials.actions'\nexport * from './credentials.selectors'\n","export const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const addMessage = (emitter, content, format = 'text') => ({\n  type: ADD_MESSAGE,\n  payload: {\n    emitter,\n    content,\n    format,\n    date: Date.now(),\n  },\n})\n\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\nexport const clearMessages = () => ({\n  type: CLEAR_MESSAGES,\n})\n","import { ADD_MESSAGE, CLEAR_MESSAGES } from './discussion.actions.js'\n\nconst initState = {\n  messages: [],\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        ...state,\n        messages: [ ...state.messages, action.payload ],\n      }\n    case CLEAR_MESSAGES:\n      return initState\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","export const uri = 'discussion'\n\nexport const getMessages = state => state[uri].messages\n","import reducer from './discussion.reducer'\n\nexport default reducer\nexport * from './discussion.actions'\nexport * from './discussion.selectors'\n","import io from 'socket.io-client'\n\nimport {\n  setOnline,\n  clearCredentials,\n  getHost,\n  getToken,\n  setHost,\n  setToken,\n  isOnline,\n  setStarted,\n} from 'redux/credentials'\n\nimport { addMessage, clearMessages } from 'redux/discussion'\n\nlet socket = null\n\nlet waitForResponse = null\n\nlet context = null\n\nlet identity = { name: 'Assistant OS' }\n\nconst matchExact = (format, content, pattern, contextIdRequired) => {\n  return (\n    format === 'text' &&\n    content.toLowerCase() === pattern &&\n    (!contextIdRequired || context || context.id === contextIdRequired)\n  )\n}\n\nconst showNotification = message => {\n  if (window.Notification && Notification.permission === 'granted') {\n    new Notification(identity.name, {\n      body: message,\n    })\n  }\n}\n\nexport const SET_MEMORY = 'SET_MEMORY'\nexport const setMemory = memory => ({\n  type: SET_MEMORY,\n  payload: { memory },\n})\n\nexport const emit = (type, token, payload) =>\n  socket && socket.emit('data', { type, token, payload })\n\nexport const init = (uri, token) => dispatch => {\n  if (socket) {\n    socket.disconnect()\n  }\n\n  socket = io(uri)\n\n  socket.on('connect', () => {\n    emit('register', token, {\n      label: 'Web App',\n      priority: 3,\n      type: 'adapter',\n    })\n\n    waitForResponse = setTimeout(() => {\n      dispatch(addMessage('other', 'Connection impossible', 'text'))\n      clearTimeout(waitForResponse)\n    }, 5000)\n  })\n\n  socket.on('disconnect', () => {\n    console.log('disconnection')\n    // dispatch(addMessage('other', 'Disconnection', 'text'))\n    dispatch(setOnline(false))\n  })\n\n  socket.on('data', ({ type, payload }) => {\n    if (type === 'registered') {\n      clearTimeout(waitForResponse)\n      dispatch(setOnline(true))\n      if (context && context.id === 'try-connection') {\n        dispatch(addMessage('other', 'Connection established', 'text'))\n      }\n\n      identity.name = payload.name\n\n      // https://developer.mozilla.org/fr/docs/Web/API/notification/Using_Web_Notifications\n\n      const notificationReady =\n        window.Notification && Notification.permission === 'granted'\n\n      Notification.requestPermission(status => {\n        if (Notification.permission !== status) {\n          Notification.permission = status\n        }\n\n        if (!notificationReady) {\n          showNotification('Notifications are now authorized.')\n        } else {\n          showNotification(`${identity.name} ready to help you!`)\n        }\n      })\n    } else if (type === 'answer-answer') {\n      dispatch(addMessage('other', payload.content, payload.format))\n      dispatch(setMemory(payload.memory))\n\n      // https://www.w3.org/TR/page-visibility/\n\n      if (document.visibilityState === 'hidden' && payload.format === 'text') {\n        showNotification(payload.content)\n      }\n    } else if (type === 'set-data') {\n    }\n  })\n}\n\nexport const sendMessage = (format, content) => (dispatch, getState) => {\n  const state = getState()\n\n  const token = getToken(state)\n\n  dispatch(addMessage('me', content, format))\n\n  const timeout = 1500\n  if (\n    matchExact(format, content, 'exit') ||\n    matchExact(format, content, 'quit')\n  ) {\n    dispatch(setStarted(false))\n  } else if (matchExact(format, content, 'reset')) {\n    setTimeout(() => {\n      dispatch(\n        addMessage('other', 'Do you really want to clear my memory?', 'text')\n      )\n      context = { id: 'confirmClear' }\n    }, timeout)\n  } else if (matchExact(format, content, 'clear')) {\n    dispatch(clearMessages())\n  } else if (matchExact(format, content, 'yes', 'confirmReset')) {\n    setTimeout(() => {\n      dispatch(addMessage('other', 'Ok. Clearing memory.', 'text'))\n      setTimeout(() => {\n        dispatch(clearMessages())\n        dispatch(clearCredentials())\n        setTimeout(() => {\n          dispatch(tryConnection())\n        }, 1000)\n      }, 2000)\n    }, timeout)\n  } else if (matchExact(format, content, 'notification')) {\n    showNotification('Hello !')\n  } else if (matchExact(format, content, 'no', 'confirmReset')) {\n    context = null\n  } else if (!isOnline(state)) {\n    setTimeout(() => {\n      if (!getHost(state)) {\n        if (content.match(/http(s|):\\/\\/[A-Za-z0-9.\\-_:/]+/)) {\n          dispatch(setHost(content))\n          dispatch(tryConnection())\n        } else {\n          dispatch(addMessage('other', 'Please provide a valid url.'))\n        }\n      } else if (!token) {\n        if (content.match(/[A-Za-z0-9]+/)) {\n          dispatch(setToken(content))\n          dispatch(\n            addMessage(\n              'other',\n              'Ok thank you. I try to establish the connection.',\n              'text'\n            )\n          )\n          context = { id: 'try-connection' }\n          dispatch(tryConnection())\n        } else {\n          dispatch(addMessage('other', 'Please provide a valid token.'))\n        }\n      } else {\n        dispatch(tryConnection())\n      }\n    }, timeout)\n  } else if (socket) {\n    emit('message', token, { content, format })\n  }\n}\n\nexport const tryConnection = () => (dispatch, getState) => {\n  const state = getState()\n  if (!getHost(state)) {\n    dispatch(\n      addMessage(\n        'other',\n        'Please provide me the url of a virtual assistant to connect to.',\n        'text'\n      )\n    )\n  } else if (!getToken(state)) {\n    dispatch(\n      addMessage(\n        'other',\n        'Please provide me the token of the assistant.',\n        'text'\n      )\n    )\n  } else {\n    dispatch(init(getHost(state), getToken(state)))\n  }\n}\n\nexport const setValue = (id, value) => (dispatch, getState) => {\n  emit('set-value', getToken(getState()), { id, value })\n  dispatch(setMemory({ [id]: value }))\n}\n","import { SET_MEMORY } from './os.actions.js'\n\nconst initState = {\n  memory: {},\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case SET_MEMORY:\n      return {\n        ...state,\n        memory: { ...state.memory, ...action.payload.memory },\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","export const uri = 'os'\n\nexport const getMemory = (state, id) => state[uri].memory[id]\n","import reducer from './os.reducer'\n\nexport default reducer\nexport * from './os.actions'\nexport * from './os.selectors'\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport credentials, { uri as credentialsUri } from './credentials'\nimport discussion, { uri as discussionUri } from './discussion'\nimport os, { uri as osUri } from './os'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst rootReducer = combineReducers({\n  [credentialsUri]: credentials,\n  [discussionUri]: discussion,\n  [osUri]: os,\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose\n\nexport default () => {\n  const store = createStore(\n    persistedReducer,\n    composeEnhancers(applyMiddleware(thunk))\n  )\n\n  const persistor = persistStore(store)\n  return {\n    store,\n    persistor,\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Loadable from 'react-loadable'\n\nimport configureStore from 'redux/configureStore'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nconst { store, persistor } = configureStore()\n\nconst Load = Loadable({\n  loader: () => import('components/App'),\n  loading: () => <div />,\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Load />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister()\nserviceWorker.register()\n"],"sourceRoot":""}